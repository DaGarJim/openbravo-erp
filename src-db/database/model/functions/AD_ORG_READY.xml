<?xml version="1.0"?>
  <database name="FUNCTION AD_ORG_READY">
    <function name="AD_ORG_READY" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
   -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_IsRecursive AD_Org.IsActive%TYPE:='N';
  v_IsAcctLE AD_ORGTYPE.IsAcctLegalEntity%TYPE:='N';

  v_num NUMBER; 
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
BEGIN
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='Cascade') THEN
        v_IsRecursive:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  Cascade=' || v_IsRecursive) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter

    v_ResultStr:='Updating Ready Flag';
    IF (v_IsRecursive='Y') THEN
      UPDATE AD_ORG
      SET ISREADY='Y'
      WHERE AD_ISORGINCLUDED(ad_org.ad_org_id, v_Record_ID, ad_org.ad_client_id)<>-1
      AND IsReady='N';      
    ELSE
      UPDATE AD_ORG
      SET ISREADY='Y'
      WHERE AD_ORG_ID=v_Record_ID;
    END IF;
      
    v_ResultStr:='Checking Ready';
    SELECT AD_ORG_CHK_READY(v_Record_ID) INTO v_num FROM DUAL;
    IF (v_num = -1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20545, 'Every ancestor of the organization must be a ready organization');
    END IF;
    
    v_ResultStr:='Checking LE';
    SELECT AD_ORGTYPE_ISTRANS_ALLOWED() INTO v_num FROM DUAL;
    IF (v_num <> 1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20540, 'Every organization where transactions are possible must have one and only one ancestor (including itself) that is a legal entity');
    END IF;
    
    v_ResultStr:='Checking BU';
    SELECT AD_ORGTYPE_ISLE_ISBU() INTO v_num FROM DUAL;
    IF (v_num > 1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20541, 'Each organization can have one and only one ancestor (including itself) that is a business unit');
    ELSIF (v_num = -1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20546, 'A business unit must have one and only one ancestor that is a legal entity');
    END IF;
      
    v_ResultStr:='Checking Schemas';
    SELECT AD_ORG_CHK_SCHEMAS() INTO v_num FROM DUAL;
    IF (v_num = -1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20542, 'Every legal entity with accounting must have itself or an ancestor at least an accounting schema attached to it');
    END IF;
    
    v_ResultStr:='Checking Calendar';
    SELECT AD_ORG_CHK_CALENDAR() INTO v_num FROM DUAL;
    IF (v_num = -3) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20537, 'Every legal entity with accounting must have itself or an ancestor at least a calendar attached to it');
    ELSIF (v_num = -2) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20538, 'All the organizations that belong to the same legal entity must have a unique calendar');
    ELSIF (v_num = -1) THEN
      ROLLBACK;
      v_Result:=0;
      RAISE_APPLICATION_ERROR(-20539, 'The calendar associated to a legal entity must be unique. So, an organization that is a legal entity must have assigned itself or any ancestor the same calendar');
    END IF;
    
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;

EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END;
END AD_ORG_READY
]]></body>
    </function>
  </database>
