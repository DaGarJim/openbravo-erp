<?xml version="1.0"?>
  <database name="FUNCTION M_PRODUCT_COSTINGUPDATE">
    <function name="M_PRODUCT_COSTINGUPDATE" type="NULL">
      <parameter name="p_pinstance_id" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 1999-2008 Openbravo, S.L
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Product_CostingUpdate.sql,v 1.3 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Create the (new) costing information
  * Description:
  *   - (optionally) update FutureCostPrice according to Parameter
  *   - (optionally) set CostStandard to FutureCostPrice
  *   - set CurrentCostPrice to cost depending on primary AcctSchema
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AD_Client_ID NUMBER(10):=0;
    v_M_Product_Category_ID NUMBER(10):=0;
    v_SetFutureCostTo CHAR(2) ;
    v_M_PriceList_Version_ID NUMBER(10):=0;
    v_SetStandardCost CHAR(1) ;
    --
    v_CostingMethod CHAR(1) ;
    v_No NUMBER:=0;
    v_No1 NUMBER:=0;
    rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='AD_Client_ID') THEN
        v_AD_Client_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  AD_Client_ID=' || v_AD_Client_ID) ;
      ELSIF(Cur_Parameter.ParameterName='M_Product_Category_ID') THEN
        v_M_Product_Category_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  M_Product_Category_ID=' || v_M_Product_Category_ID) ;
      ELSIF(Cur_Parameter.ParameterName='SetFutureCostTo') THEN
        v_SetFutureCostTo:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  SetFutureCostTo=' || v_SetFutureCostTo) ;
      ELSIF(Cur_Parameter.ParameterName='M_PriceList_Version_ID') THEN
        v_M_PriceList_Version_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  M_PriceList_Version_ID=' || v_M_PriceList_Version_ID) ;
      ELSIF(Cur_Parameter.ParameterName='SetStandardCost') THEN
        v_SetStandardCost:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  SetStandardCost=' || v_SetStandardCost) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- ========== (1) Set Future Cost To ==========
    -- S  - Standard Cost
    IF(v_SetFutureCostTo='S') THEN
      DBMS_OUTPUT.PUT_LINE('Set to Standard Cost') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=CostStandard
      WHERE AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- DP - Difference PO
    ELSIF(v_SetFutureCostTo='DP') THEN
      DBMS_OUTPUT.PUT_LINE('Set to Difference PO') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=CostStandard +(CostStandardPOAmt/CostStandardPOQty)
      WHERE CostStandardPOQty<>0
        AND CostStandardPOAmt<>0
        AND AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- DI - Difference Invoice
    ELSIF(v_SetFutureCostTo='DI') THEN
      DBMS_OUTPUT.PUT_LINE('Set to Difference Inv') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=CostStandard +(CostStandardCumAmt/CostStandardCumQty)
      WHERE CostStandardCumQty<>0
        AND CostStandardCumAmt<>0
        AND AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- P - Last PO Price
    ELSIF(v_SetFutureCostTo='P') THEN
      DBMS_OUTPUT.PUT_LINE('Set to PO Price') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=PriceLastPO
      WHERE PriceLastPO<>0
        AND AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- L - Last Inv Price
    ELSIF(v_SetFutureCostTo='I') THEN
      DBMS_OUTPUT.PUT_LINE('Set to Inv Price') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=PriceLastInv
      WHERE PriceLastInv<>0
        AND AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- A - Average Cost
    ELSIF(v_SetFutureCostTo='A') THEN
      DBMS_OUTPUT.PUT_LINE('Set to Average Cost') ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=CostAverage
      WHERE CostAverage<>0
        AND AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
      -- LL - Price List - Limit
    ELSIF(v_SetFutureCostTo='LL' AND v_M_PriceList_Version_ID>0) THEN
      DBMS_OUTPUT.PUT_LINE('Set to PriceList ' || v_M_PriceList_Version_ID) ;
      UPDATE M_Product_Costing
        SET FutureCostPrice=
        (SELECT pp.PriceLimit
        FROM M_ProductPrice pp
        WHERE pp.M_PriceList_Version_ID=v_M_PriceList_Version_ID
          AND pp.M_Product_ID=M_Product_Costing.M_Product_ID
        )
        /**    SET  FutureCostPrice = C_Currency_Convert (
        -- Amount
        (SELECT pp.PriceLimit FROM M_ProductPrice pp
        WHERE pp.M_PriceList_Version_ID=11
        AND pp.M_Product_ID=M_Product_Costing.M_Product_ID),
        -- Cur From
        (SELECT C_Currency_ID FROM M_PriceList pl, M_PriceList_Version pv
        WHERE pv.M_PriceList_ID=pl.M_PriceList_ID
        AND pv.M_PriceList_Version_ID=11),
        -- Cur To
        (SELECT a.C_Currency_ID FROM C_AcctSchema a WHERE a.C_AcctSchema_ID=M_Product_Costing.C_AcctSchema_ID))
        **/
      WHERE AD_Client_ID=v_AD_Client_ID  -- we have a price
        AND EXISTS
        (SELECT *
        FROM M_ProductPrice pp
        WHERE pp.M_PriceList_Version_ID=v_M_PriceList_Version_ID
          AND pp.M_Product_ID=M_Product_Costing.M_Product_ID
        )
        -- and the same currency
        AND EXISTS
        (SELECT *
        FROM C_AcctSchema a,
          M_PriceList pl,
          M_PriceList_Version pv
        WHERE a.C_AcctSchema_ID=M_Product_Costing.C_AcctSchema_ID
          AND pv.M_PriceList_Version_ID=v_M_PriceList_Version_ID
          AND pv.M_PriceList_ID=pl.M_PriceList_ID
          AND pl.C_Currency_ID=a.C_Currency_ID
        )
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No:=rowcount;
    ELSE
      DBMS_OUTPUT.PUT_LINE('SetFutureCostTo=' || v_SetFutureCostTo) ;
    END IF;
    DBMS_OUTPUT.PUT_LINE(' - Updated: ' || v_No) ;
    -- ========== (2) SetStandardCost ==========
    IF(v_SetStandardCost='Y') THEN
      DBMS_OUTPUT.PUT_LINE('Set Standard Cost') ;
      UPDATE M_Product_Costing
        SET CostStandard=FutureCostPrice
      WHERE AD_Client_ID=v_AD_Client_ID
        AND(v_M_Product_Category_ID IS NULL
        OR EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_Category_ID=v_M_Product_Category_ID
          AND p.M_Product_ID=M_Product_Costing.M_Product_ID
        )) ;
      rowcount:=SQL%ROWCOUNT;
      v_No1:=rowcount;
      DBMS_OUTPUT.PUT_LINE(' - Updated: ' || v_No1) ;
    END IF;
    v_Message:='@Updated@: ' || v_No || '/' || v_No1;
    -- ========== (3) Update CurrentCostPrice depending on Costing Method ==========
    SELECT a.CostingMethod
    INTO v_CostingMethod
    FROM C_AcctSchema a,
      AD_ClientInfo ci
    WHERE a.C_AcctSchema_ID=ci.C_AcctSchema1_ID
      AND ci.AD_Client_ID=v_AD_Client_ID;
    -- (A)verage (S)tandard
    DBMS_OUTPUT.PUT_LINE('Update Current Cost ' || v_CostingMethod) ;
    UPDATE M_Product_Costing
      SET CurrentCostPrice=(
      CASE v_CostingMethod WHEN 'A' THEN CostAverage ELSE CostStandard
      END
      )
    WHERE AD_Client_ID=v_AD_Client_ID;
    rowcount:=SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE(' - Updated: ' || rowcount) ;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_PRODUCT_COSTINGUPDATE
]]></body>
    </function>
  </database>
