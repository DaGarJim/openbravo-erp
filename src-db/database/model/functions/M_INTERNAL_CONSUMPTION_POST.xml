<?xml version="1.0"?>
  <database name="FUNCTION M_INTERNAL_CONSUMPTION_POST">
    <function name="M_INTERNAL_CONSUMPTION_POST" type="NULL">
      <parameter name="pinstance_id" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.

  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights

  * and limitations under the License.
  * The Original Code is  Compiere  ERP \&  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.

  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL

  * Contributions are Copyright (C) 1999-2008 Openbravo, S.L
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Movement_Post.sql,v 1.3 2003/09/05 04:58:06 jjanke Exp $
  ***
  * Title: Post Movements
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  Record_ID NUMBER;
  v_Result NUMBER:=1;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_IsProcessing CHAR(1) ;
    v_IsProcessed CHAR(1) ;
    v_NoProcessed NUMBER:=0;
    v_MoveDate DATE;
    v_Client_ID NUMBER(10) ;
    v_Org_ID NUMBER;
    v_User NUMBER;
	v_line NUMBER;
    v_Count NUMBER:=0;
    END_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || Record_ID) ;
    -- Reading Internal_Consumption
    SELECT MovementDate,
      Processing,
      Processed,
      AD_Client_ID,
      AD_Org_ID
    INTO v_MoveDate,
      v_IsProcessing,
      v_IsProcessed,
      v_Client_ID,
      v_Org_ID
    FROM M_Internal_Consumption
    WHERE M_Internal_Consumption_ID=Record_ID  FOR UPDATE;
    IF(v_IsProcessing='Y') THEN
	  RAISE_APPLICATION_ERROR(-20000, '@OtherProcessActive@') ;
    END IF;
    IF(v_IsProcessed='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
    END IF;
    IF(NOT END_PROCESS) THEN
      v_ResultStr:='CheckingRestrictions';
      SELECT COUNT(*), MAX(line)
      INTO v_Count,v_line
      FROM M_Internal_ConsumptionLine M,
        M_Product P
      WHERE M.M_PRODUCT_ID=P.M_PRODUCT_ID
        AND P.M_ATTRIBUTESET_ID IS NOT NULL
        AND M.M_ATTRIBUTESETINSTANCE_ID IS NULL
        AND M.M_Internal_Consumption_ID=Record_ID;
      IF v_Count<>0 THEN
       RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@productWithoutAttributeSet@') ;
      END IF;
    END IF;--END_PROCESS
    IF(NOT END_PROCESS) THEN
      -- Start Processing ------------------------------------------------------
      v_ResultStr:='LockingInternal_Consumption';
      UPDATE M_Internal_Consumption
        SET Processing='Y'
      WHERE M_Internal_Consumption_ID=Record_ID;
      -- Commented by cromero 19102006 COMMIT;
      /**
      * Accounting first step
      */
      DECLARE
        Cur_MoveLine RECORD;
        NextNo NUMBER;
      BEGIN --FOR COMMIT
        FOR Cur_MoveLine IN
          (SELECT *
          FROM M_Internal_ConsumptionLine
          WHERE M_Internal_Consumption_ID=Record_ID
          ORDER BY Line
          )
        LOOP
          v_ResultStr:='Transaction for line' || Cur_MoveLine.Line;
          -- FROM
          AD_Sequence_Next('M_Transaction', v_Client_ID, NextNo) ;
          INSERT
          INTO M_Transaction
            (
              M_Transaction_ID, AD_Client_ID, AD_Org_ID, IsActive,
              Created, CreatedBy, Updated, UpdatedBy,
              MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,
              MovementDate, MovementQty, M_Internal_ConsumptionLine_ID, M_Product_UOM_ID,
              QuantityOrder, C_UOM_ID
            )
            VALUES
            (
              NextNo, Cur_MoveLine.AD_Client_ID, Cur_MoveLine.AD_Org_ID, 'Y',
              now(), 0, now(), 0,
              'D-', Cur_MoveLine.M_Locator_ID, Cur_MoveLine.M_Product_ID, COALESCE(Cur_MoveLine.M_AttributeSetInstance_ID, 0),
              v_MoveDate, (Cur_MoveLine.MovementQty * -1), Cur_MoveLine.M_Internal_ConsumptionLine_ID, Cur_MoveLine.M_Product_UOM_ID,
              (Cur_MoveLine.QuantityOrder * -1), Cur_MoveLine.C_UOM_ID
            )
            ;
          -- TO
          M_Check_Stock(Cur_MoveLine.M_Product_ID, v_Client_ID, v_Org_ID, v_Result, v_Message) ;
		  IF v_Result=0 THEN
          RAISE_APPLICATION_ERROR(-20000, v_Message||' '||'@line@'||' '||Cur_MoveLine.line) ;
          END IF;
        END LOOP;
      END;--FOR  COMMIT
    END IF;--END PROCESS
    IF(NOT END_PROCESS) THEN
      -- End Processing --------------------------------------------------------
      --<<END_PROCESSING>>
      v_ResultStr:='UnLockingMovement';
      UPDATE M_Internal_Consumption
        SET Processed='Y'
      WHERE M_Internal_Consumption_ID=Record_ID;
      -- Commented by cromero 19102006 COMMIT;
    END IF;--END_PROCESS
    --<<END_PROCESS>>
    v_ResultStr:='UnLockingMovement';
    UPDATE M_Internal_Consumption
      SET Processing='N'
    WHERE M_Internal_Consumption_ID=Record_ID;
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, v_User, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  UPDATE M_Internal_Consumption
    SET Processing='N'
  WHERE M_Internal_Consumption_ID=Record_ID;
  -- Commented by cromero 19102006 COMMIT;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_INTERNAL_CONSUMPTION_POST
]]></body>
    </function>
  </database>
