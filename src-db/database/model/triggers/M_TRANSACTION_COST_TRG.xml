<?xml version="1.0"?>
  <database name="TRIGGER M_TRANSACTION_COST_TRG">
    <trigger name="M_TRANSACTION_COST_TRG" table="M_TRANSACTION_COST" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[




/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2014 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_warehouse            VARCHAR(32);
  v_org                  VARCHAR(32);
  v_transaction          VARCHAR(32);
  v_old_transaction			 VARCHAR(32);
  v_sign                 NUMBER;
  v_old_sign             NUMBER;
  v_product              VARCHAR(32);
  v_trans_date           DATE;
  v_legal                VARCHAR(32);
  v_count                NUMBER;
  v_valuation            NUMBER;
  v_old_valuation			   NUMBER;
  v_currency_to          VARCHAR(32);

    
BEGIN

  IF AD_isTriggerEnabled()='N' THEN RETURN;
  END IF;

  --Update m_stock_valuation
  
  SELECT COUNT(*) 
    INTO v_count
  FROM ad_preference
  WHERE property = 'UnitaryCost'
    AND ad_client_id IN (:NEW.ad_client_id, '0')
    AND TO_CHAR(value) = 'Y';
    
  IF (v_count > 0) THEN
  
    IF INSERTING THEN
      v_transaction := :NEW.m_transaction_id;
      v_org := :NEW.ad_org_id;
    ELSIF DELETING THEN
      v_transaction := :OLD.m_transaction_id;
      v_org := :OLD.ad_org_id;
    ELSIF UPDATING  AND :OLD.cost <> :NEW.cost THEN
      v_transaction := :NEW.m_transaction_id;
      v_old_transaction := :OLD.m_transaction_id;
      v_org := :OLD.ad_org_id;
    END IF;
      
    SELECT t.m_product_id, l.m_warehouse_id, t.movementdate, CASE WHEN t.movementqty < 0 THEN 0 ELSE 1 END
    INTO v_product, v_warehouse, v_trans_date, v_sign
    FROM m_transaction t
    JOIN m_locator l ON (t.m_locator_id = l.m_locator_id)
    WHERE m_transaction_id = v_transaction;
    
     IF (v_old_transaction IS NOT NULL) THEN
       SELECT CASE WHEN t.movementqty < 0 THEN 0 ELSE 1 END
       INTO  v_old_sign
       FROM m_transaction t
       JOIN m_locator l ON (t.m_locator_id = l.m_locator_id)
       WHERE m_transaction_id = v_old_transaction;
     END IF;
    
    SELECT ad_org_id, c_currency_id
    INTO v_legal, v_currency_to
    FROM ad_org
    WHERE ad_org_id = ad_get_org_le_bu(v_org,'LE');
    
    IF INSERTING THEN
        v_valuation := c_currency_convert_precision(:NEW.cost, :NEW.c_currency_id, v_currency_to, :NEW.costdate, NULL, :NEW.ad_client_id, v_legal, 'C');
      IF v_sign <> 1 THEN
        v_valuation := - v_valuation;
      END IF;
      M_UPDATE_STOCK_VALUATION(:NEW.ad_client_id, v_legal, :NEW.createdby, v_warehouse, v_product, 0, v_valuation);
    ELSIF DELETING THEN
      v_valuation := c_currency_convert_precision(:OLD.cost, :OLD.c_currency_id, v_currency_to, :OLD.costdate, NULL, :OLD.ad_client_id, v_legal, 'C');
      IF v_sign <> 1 THEN
        v_valuation := - v_valuation;
      END IF;
      M_UPDATE_STOCK_VALUATION(:OLD.ad_client_id, v_legal, :OLD.createdby, v_warehouse, v_product, 0, - v_valuation);
    ELSIF UPDATING AND :OLD.cost <> :NEW.cost THEN
      v_valuation := c_currency_convert_precision(:NEW.cost, :NEW.c_currency_id, v_currency_to, :NEW.costdate, NULL, :NEW.ad_client_id, v_legal, 'C');
      IF v_sign <> 1 THEN
        v_valuation := - v_valuation;
      END IF;
      v_old_valuation := c_currency_convert_precision(:OLD.cost, :OLD.c_currency_id, v_currency_to, :OLD.costdate, NULL, :OLD.ad_client_id, v_legal, 'C');
      IF v_old_sign <> 1 THEN
        v_old_valuation := - v_old_valuation;
      END IF;
      M_UPDATE_STOCK_VALUATION(:OLD.ad_client_id, v_legal, :OLD.createdby, v_warehouse, v_product, 0, - v_old_valuation);
      M_UPDATE_STOCK_VALUATION(:NEW.ad_client_id, v_legal, :NEW.createdby, v_warehouse, v_product, 0, v_valuation);
    END IF;
  END IF;
  
  END M_TRANSACTION_COST_TRG
]]></body>
    </trigger>
  </database>
