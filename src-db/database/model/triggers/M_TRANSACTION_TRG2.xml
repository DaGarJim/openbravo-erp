<?xml version="1.0"?>
  <database name="TRIGGER M_TRANSACTION_TRG2">
    <trigger name="M_TRANSACTION_TRG2" table="M_TRANSACTION" fires="before" insert="true" update="false" delete="false" foreach="row">
      <body><![CDATA[

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2012-2014 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_onhand NUMBER:=0;
  v_reserved NUMBER:=0;
  v_count       NUMBER;
  v_isgeneric   CHAR(1);
  v_attr_description    VARCHAR2(255);
  v_product_value       VARCHAR2(40);
  v_locator_value       VARCHAR2(40);
  v_uom_value           VARCHAR2(3);
  cur_reserve_stock RECORD;

BEGIN
  IF (AD_isTriggerEnabled() = 'N') THEN RETURN;
  END IF;

  IF (INSERTING) THEN
    SELECT isgeneric, value INTO v_isgeneric, v_product_value
    FROM m_product
    WHERE m_product_id = :NEW.m_product_id;
    IF (v_isgeneric = 'Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@CannotUseGenericProduct@');
    END IF;
    FOR cur_reserve_stock IN (
        SELECT COALESCE(sum(rs.quantity - COALESCE(rs.releasedqty,0)), 0) AS reservedQty, sd.qtyonhand
        FROM m_reservation_stock rs
            JOIN m_reservation r ON rs.m_reservation_id = r.m_reservation_id
            JOIN m_storage_detail sd ON r.m_product_id = sd.m_product_id
                                        AND r.c_uom_id = sd.c_uom_id
                                        AND  rs.m_attributesetinstance_id = COALESCE(sd.m_attributesetinstance_id, '0')
                                        AND rs.m_locator_id = sd.m_locator_id
                                        AND sd.m_product_uom_id IS NULL
        WHERE r.res_status NOT IN ('CL', 'DR')
          AND r.m_product_id = :NEW.m_product_id
          AND r.c_uom_id = :NEW.c_uom_id
          AND rs.m_attributesetinstance_id = :NEW.m_attributesetinstance_id
          AND rs.m_locator_id = :NEW.m_locator_id
        GROUP BY sd.qtyonhand, sd.m_storage_detail_id)
      LOOP
       	  v_reserved:=cur_reserve_stock.reservedQty;
       	  v_onhand:=cur_reserve_stock.qtyonhand;
      END LOOP;
      IF (v_onhand - v_reserved < ABS(:NEW.movementqty) AND v_reserved > 0 AND :NEW.Checkreservedqty='Y') THEN
        SELECT description
          INTO v_attr_description
        FROM M_AttributeSetInstance
        WHERE M_AttributeSetInstance_ID = :NEW.m_attributesetinstance_id;
        SELECT uomsymbol
          INTO v_uom_value
        FROM C_Uom
        WHERE C_Uom_ID = :NEW.c_uom_id;
        SELECT value
          INTO v_locator_value
        FROM M_Locator
        WHERE M_Locator_ID = :NEW.m_locator_id;
        RAISE_APPLICATION_ERROR(-20000, '@CannotTakeOutReservedStock@' || ' @of@' || ' @Product@: ' || v_product_value || ', @AttributeSetInstance@: ' || COALESCE(v_attr_description, '-') || ', @UOM@: ' || v_uom_value || ' @And@'||' @StorageBin@: ' || COALESCE(v_locator_value, '-'));
      END IF;
  END IF;
END M_TRANSACTION_TRG2
]]></body>
    </trigger>
  </database>
