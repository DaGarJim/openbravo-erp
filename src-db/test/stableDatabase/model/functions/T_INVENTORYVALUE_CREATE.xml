<?xml version="1.0"?>
  <database name="FUNCTION T_INVENTORYVALUE_CREATE">
    <function name="T_INVENTORYVALUE_CREATE" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere License
  * Version 2.5.0 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  * http://www.compiere.org/license.html
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
  Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 1999-2005 Openbravo, S.L
  *************************************************************************
  * $Id: T_InventoryValue_Create.sql,v 1.6 2003/03/17 20:32:29 jjanke Exp $
  ***
  * Title: Inventory Valuation Temporary Table
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_M_PriceList_Version_ID NUMBER(10) ;
    v_DateValue DATE;
    v_M_Warehouse_ID NUMBER(10) ;
    v_C_Currency_ID NUMBER(10) ;
    FINISH_PROCESS BOOLEAN:=false;
    rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='M_PriceList_Version_ID') THEN
        v_M_PriceList_Version_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  M_PriceList_Version_ID=' || v_M_PriceList_Version_ID) ;
      ELSIF(Cur_Parameter.ParameterName='DateValue') THEN
        v_DateValue:=Cur_Parameter.P_Date;
        DBMS_OUTPUT.PUT_LINE('  DateValue=' || v_DateValue) ;
      ELSIF(Cur_Parameter.ParameterName='M_Warehouse_ID') THEN
        v_M_Warehouse_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  M_Warehouse_ID=' || v_M_Warehouse_ID) ;
      ELSIF(Cur_Parameter.ParameterName='C_Currency_ID') THEN
        v_C_Currency_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  C_Currency_ID=' || v_C_Currency_ID) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Clear
    -- v_ResultStr := 'ClearTable';
    -- DELETE FROM T_InventoryValue WHERE M_Warehouse_ID=v_M_Warehouse_ID;
    -- COMMIT;
    -- Insert Products
    v_ResultStr:='InsertStockedProducts';
    INSERT
    INTO T_InventoryValue
      (
        AD_Client_ID,
        AD_Org_ID,
        AD_PInstance_ID,
        M_Warehouse_ID,
        M_Product_ID
      )
    SELECT AD_Client_ID,
      AD_Org_ID,
      p_PInstance_ID,
      v_M_Warehouse_ID,
      M_Product_ID
    FROM M_Product
    WHERE IsStocked='Y';
    --
    rowcount:=SQL%ROWCOUNT;
    IF(rowcount=0) THEN
      v_Message:='@Created@ = 0';
      FINISH_PROCESS:=true;
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      -- Update Constants
      v_ResultStr:='UpdateConstants';
      UPDATE T_InventoryValue
        SET DateValue=TRUNC(v_DateValue) + 0.9993,
        M_PriceList_Version_ID=v_M_PriceList_Version_ID,
        C_Currency_ID=v_C_Currency_ID
      WHERE M_Warehouse_ID=v_M_Warehouse_ID;
      -- Get current QtyOnHand
      v_ResultStr:='GetQtyOnHand';
      UPDATE T_InventoryValue
        SET QtyOnHand=
        (SELECT SUM(QtyOnHand)
        FROM M_Storage_Detail s,
          M_Locator l
        WHERE T_InventoryValue.M_Product_ID=s.M_Product_ID
          AND l.M_Locator_ID=s.M_Locator_ID
          AND l.M_Warehouse_ID=T_InventoryValue.M_Warehouse_ID
        )
      WHERE T_InventoryValue.M_Warehouse_ID=v_M_Warehouse_ID;
      -- Adjust for Valuation Date
      v_ResultStr:='AdjustQtyOnHand';
      UPDATE T_InventoryValue
        SET QtyOnHand=
        (SELECT T_InventoryValue.QtyOnHand - COALESCE(SUM(t.MovementQty), 0)
        FROM M_Transaction t,
          M_Locator l
        WHERE t.M_Product_ID=T_InventoryValue.M_Product_ID  --            AND t.M_AttributeSetInstance_ID=T_InventoryValue.M_AttributeSetInstance_ID
          AND t.MovementDate>T_InventoryValue.DateValue
          AND t.M_Locator_ID=l.M_Locator_ID
          AND l.M_Warehouse_ID=T_InventoryValue.M_Warehouse_ID
        )
      WHERE T_InventoryValue.M_Warehouse_ID=v_M_Warehouse_ID;
      -- Delete Records w/o OnHand Qty
      v_ResultStr:='DeleteZeroQtyOnHand';
      DELETE FROM T_InventoryValue  WHERE QtyOnHand=0  OR QtyOnHand IS NULL;
      -- Update Prices
      v_ResultStr:='GetPrices';
      UPDATE T_InventoryValue
        SET PricePO=
        (SELECT C_Currency_Convert(po.PriceList, po.C_Currency_ID, T_InventoryValue.C_Currency_ID, T_InventoryValue.DateValue, null, T_InventoryValue.AD_Client_ID, T_InventoryValue.AD_Org_ID)
        FROM M_Product_PO po
        WHERE po.M_Product_ID=T_InventoryValue.M_Product_ID
          AND po.IsCurrentVendor='Y'
          AND po.M_Product_ID=
          (SELECT MAX(M_Product_PO.M_Product_ID)
          FROM M_Product_PO
          WHERE M_Product_PO.M_Product_ID=T_InventoryValue.M_Product_ID
            AND M_Product_PO.IsCurrentVendor='Y'
          )
        )
        ,
        PriceList=
        (SELECT C_Currency_Convert(pp.PriceList, pl.C_Currency_ID, T_InventoryValue.C_Currency_ID, T_InventoryValue.DateValue, null, T_InventoryValue.AD_Client_ID, T_InventoryValue.AD_Org_ID)
        FROM M_PriceList pl,
          M_PriceList_Version plv,
          M_ProductPrice pp
        WHERE pp.M_Product_ID=T_InventoryValue.M_Product_ID
          AND pp.M_PriceList_Version_ID=T_InventoryValue.M_PriceList_Version_ID
          AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID
          AND plv.M_PriceList_ID=pl.M_PriceList_ID
        )
        ,
        PriceStd=
        (SELECT C_Currency_Convert(pp.PriceStd, pl.C_Currency_ID, T_InventoryValue.C_Currency_ID, T_InventoryValue.DateValue, null, T_InventoryValue.AD_Client_ID, T_InventoryValue.AD_Org_ID)
        FROM M_PriceList pl,
          M_PriceList_Version plv,
          M_ProductPrice pp
        WHERE pp.M_Product_ID=T_InventoryValue.M_Product_ID
          AND pp.M_PriceList_Version_ID=T_InventoryValue.M_PriceList_Version_ID
          AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID
          AND plv.M_PriceList_ID=pl.M_PriceList_ID
        )
        ,
        PriceLimit=
        (SELECT C_Currency_Convert(pp.PriceLimit, pl.C_Currency_ID, T_InventoryValue.C_Currency_ID, T_InventoryValue.DateValue, null, T_InventoryValue.AD_Client_ID, T_InventoryValue.AD_Org_ID)
        FROM M_PriceList pl,
          M_PriceList_Version plv,
          M_ProductPrice pp
        WHERE pp.M_Product_ID=T_InventoryValue.M_Product_ID
          AND pp.M_PriceList_Version_ID=T_InventoryValue.M_PriceList_Version_ID
          AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID
          AND plv.M_PriceList_ID=pl.M_PriceList_ID
        )
        ,
        CostStandard=
        (SELECT C_Currency_Convert(pc.CurrentCostPrice, acs.C_Currency_ID, T_InventoryValue.C_Currency_ID, T_InventoryValue.DateValue, null, T_InventoryValue.AD_Client_ID, T_InventoryValue.AD_Org_ID)
        FROM AD_ClientInfo ci,
          C_AcctSchema acs,
          M_Product_Costing pc
        WHERE T_InventoryValue.AD_Client_ID=ci.AD_Client_ID
          AND ci.C_AcctSchema1_ID=acs.C_AcctSchema_ID
          AND acs.C_AcctSchema_ID=pc.C_AcctSchema_ID
          AND T_InventoryValue.M_Product_ID=pc.M_Product_ID
        )
      WHERE T_InventoryValue.M_Warehouse_ID=v_M_Warehouse_ID;
      -- Update Values
      v_ResultStr:='UpdateValue';
      UPDATE T_InventoryValue
        SET PricePOAmt=QtyOnHand * PricePO,
        PriceListAmt=QtyOnHand * PriceList,
        PriceStdAmt=QtyOnHand * PriceStd,
        PriceLimitAmt=QtyOnHand * PriceLimit,
        CostStandardAmt=QtyOnHand * CostStandard
      WHERE M_Warehouse_ID=v_M_Warehouse_ID;
      rowcount:=SQL%ROWCOUNT;
      v_Message:='@Created@ = ' || rowcount;
    END IF;--FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
   v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END T_InventoryValue_Create



]]></body>
    </function>
  </database>
