<?xml version="1.0"?>
  <database name="TRIGGER AD_ORG_TRG">
    <trigger name="AD_ORG_TRG" table="AD_ORG" fires="after" insert="true" update="false" delete="true" foreach="row">
      <body>


    /*************************************************************************
    * The contents of this file are subject to the Compiere License
    * Version 2.5.0 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License at
    * http://www.compiere.org/license.html
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &amp;  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
    Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 1999-2005 Openbravo, S.L
    *************************************************************************
    * $Id: AD_Org_Trg.sql,v 1.5 2002/12/02 03:37:20 jjanke Exp $
    ***
    * Title: Insert Access to all Roles of Client
    * Description:
    *   Add Org to
    *    Org Access
    *    Tree
    *    OrgInfo
    ************************************************************************/
  v_xTree_ID NUMBER;
  v_xParent_ID NUMBER;
BEGIN
  IF(INSERTING) THEN
    -- Add to all roles of the client
    INSERT
    INTO AD_Role_OrgAccess
      (
        AD_Role_ID, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy,
        Updated, UpdatedBy
      )
    SELECT AD_Role_ID, :new.AD_Client_ID, :new.AD_Org_ID,
       'Y', SysDate, :new.CreatedBy,
      SysDate, :new.CreatedBy
    FROM AD_Role
    WHERE AD_Client_ID=:new.AD_Client_ID;
    --  Create TreeNode --
    --  get AD_Tree_ID + ParentID
    SELECT c.AD_Tree_Org_ID,
      n.Node_ID
    INTO v_xTree_ID,
      v_xParent_ID
    FROM AD_ClientInfo c,
      AD_TreeNode n
    WHERE c.AD_Tree_Org_ID=n.AD_Tree_ID
      AND n.Parent_ID IS NULL
      AND c.AD_Client_ID=:new.AD_Client_ID;
    -- DBMS_OUTPUT.PUT_LINE('Tree='||v_xTree_ID||'  Node='||:new.AD_Org_ID||'  Parent='||v_xParent_ID);
    --  Insert into TreeNode
    INSERT
    INTO AD_TreeNode
      (
        AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, AD_Tree_ID, Node_ID,
        Parent_ID, SeqNo
      )
      VALUES
      (
        :new.AD_Client_ID, :new.AD_Org_ID, :new.IsActive,
        :new.Created, :new.CreatedBy, :new.Updated,
        :new.UpdatedBy, v_xTree_ID, :new.AD_Org_ID,
        v_xParent_ID,(
        CASE :new.IsSummary
          WHEN 'Y'
          THEN 100
          ELSE 999
        END
        )
      )
      ;
    -- Summary Nodes first
    -- Org Info
    INSERT
    INTO AD_OrgInfo
      (
        AD_Org_ID, AD_Client_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, C_Location_ID, Duns,
        TaxID, PA_Goal_ID
      )
      VALUES
      (
        :new.AD_Org_ID, :new.AD_Client_ID, 'Y',
        SysDate, :new.CreatedBy, SysDate,
        :new.CreatedBy, NULL, '?',
         '?', NULL
      )
      ;
  ELSIF(DELETING) THEN
    --  Delete TreeNode --
    --  get AD_Tree_ID
    SELECT c.AD_Tree_Org_ID
    INTO v_xTree_ID
    FROM AD_ClientInfo c
    WHERE c.AD_Client_ID=:old.AD_Client_ID;
    DELETE
    FROM AD_TREENODE
    WHERE AD_CLIENT_ID=:old.AD_Client_ID
      AND AD_Tree_ID=v_xTree_ID
      AND Node_ID=:old.AD_Org_ID;
  END IF;
  -- Deleting
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR(-20014, 'AD_Org InsertTrigger Error: No ClientInfo or parent TreeNode') ;
END AD_Org_Trg 
</body>
    </trigger>
  </database>
