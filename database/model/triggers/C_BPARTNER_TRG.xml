<?xml version="1.0"?>
  <database name="TRIGGER C_BPARTNER_TRG">
    <trigger name="C_BPARTNER_TRG" table="C_BPARTNER" fires="after" insert="true" update="false" delete="true" foreach="row">
      <body>


/*************************************************************************
 * The contents of this file are subject to the Compiere License
 * Version 2.5.0 ("License"); You may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.compiere.org/license.html
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing rights
 * and limitations under the License.
 * The Original Code is  Compiere  ERP &amp;  Business Solution
 * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
Inc.
 * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
 * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
 * All Rights Reserved.
 * Contributor(s): Openbravo SL
 * Contributions are Copyright (C) 1999-2005 Openbravo, S.L
 *************************************************************************
 * $Id: C_BPartner_Trg.sql,v 1.4 2002/10/23 03:16:57 jjanke Exp $
 ***
 * Title: Business Partner new necord
 * Description:
 *    - create default Account records
 *    - add treenode
 ************************************************************************/

   TYPE RECORD IS REF CURSOR;
   Cur_Defaults RECORD;
   Cur_Defaults2 RECORD;

  v_xTree_ID        NUMBER;
  v_xParent_ID      NUMBER;
  v_BP_Acct_ID    NUMBER;

BEGIN
    --  Default Accounts for all AcctSchema
 IF (INSERTING) THEN
     FOR Cur_Defaults IN (SELECT  *
                            FROM  C_BP_Group_Acct d1
                           WHERE  d1.C_BP_Group_ID=:new.C_BP_Group_ID) LOOP
         --  Customer
   Ad_Sequence_Next('C_BP_Customer_Acct', Cur_Defaults.C_AcctSchema_ID, v_BP_Acct_ID);
   INSERT INTO C_BP_Customer_Acct
             (C_BP_Customer_Acct_ID,C_BPartner_ID, C_AcctSchema_ID,
             AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,
             C_Receivable_Acct, C_Prepayment_Acct, Status)
         VALUES
             (v_BP_Acct_ID,:new.C_BPartner_ID, Cur_Defaults.C_AcctSchema_ID,
             :new.AD_Client_ID, :new.AD_Org_ID, 'Y', SysDate, :new.CreatedBy, SysDate, :new.UpdatedBy,
             Cur_Defaults.C_Receivable_Acct, Cur_Defaults.C_Prepayment_Acct, Cur_Defaults.Status);
   --  Vendor

   Ad_Sequence_Next('C_BP_Vendor_Acct', Cur_Defaults.C_AcctSchema_ID, v_BP_Acct_ID);
   INSERT INTO C_BP_Vendor_Acct
             (C_BP_Vendor_Acct_ID, C_BPartner_ID, C_AcctSchema_ID,
             AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,
             V_Liability_Acct, V_Liability_Services_Acct, V_Prepayment_Acct, Status)
         VALUES
             (v_BP_Acct_ID,:new.C_BPartner_ID, Cur_Defaults.C_AcctSchema_ID,
             :new.AD_Client_ID, :new.AD_Org_ID, 'Y', SysDate, :new.CreatedBy, SysDate, :new.UpdatedBy,
             Cur_Defaults.V_Liability_Acct, Cur_Defaults.V_Liability_Services_Acct, Cur_Defaults.V_Prepayment_Acct, Cur_Defaults.Status);
  END LOOP;
  FOR Cur_Defaults2 IN (SELECT * FROM C_AcctSchema_Default d2
                WHERE EXISTS (SELECT * FROM AD_ClientInfo c2
                   WHERE d2.C_AcctSchema_ID IN (c2.C_AcctSchema1_ID, c2.C_AcctSchema2_ID, c2.C_AcctSchema3_ID)
           AND AD_Client_ID=:new.AD_Client_ID)) LOOP
   --  Employee
         INSERT INTO C_BP_Employee_Acct
             (C_BPartner_ID, C_AcctSchema_ID,
             AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,
             E_Expense_Acct, E_Prepayment_Acct)
         VALUES
             (:new.C_BPartner_ID, Cur_Defaults2.C_AcctSchema_ID,
             :new.AD_Client_ID, :new.AD_Org_ID, 'Y', SysDate, :new.CreatedBy, SysDate, :new.UpdatedBy,
             Cur_Defaults2.E_Expense_Acct, Cur_Defaults2.E_Prepayment_Acct);
     END LOOP;

     --  Create TreeNode --
     --  get AD_Tree_ID + ParentID
     SELECT  c.AD_Tree_BPartner_ID, n.Node_ID
    INTO  v_xTree_ID, v_xParent_ID
     FROM    AD_ClientInfo c, AD_TreeNodeBP n
     WHERE   c.AD_Tree_BPartner_ID=n.AD_Tree_ID
         AND n.Parent_ID IS NULL
         AND c.AD_Client_ID=:new.AD_Client_ID;

     --  DBMS_OUTPUT.PUT_LINE('Tree='||v_xTree_ID||'  Node='||:new.AD_Menu_ID||'  Parent='||v_xParent_ID);

     --  Insert into TreeNode
     INSERT INTO AD_TreeNodeBP
         (AD_Client_ID, AD_Org_ID,
         IsActive, Created, CreatedBy, Updated, UpdatedBy,
         AD_Tree_ID, Node_ID,
         Parent_ID, SeqNo)
     VALUES
         (:new.AD_Client_ID, :new.AD_Org_ID,
         :new.IsActive, :new.Created, :new.CreatedBy, :new.Updated, :new.UpdatedBy,
         v_xTree_ID, :new.C_BPartner_ID,
         v_xParent_ID, (CASE :new.IsSummary WHEN 'Y' THEN 100 ELSE 999 END));     -- Summary Nodes first
     ELSIF (DELETING) THEN
     DELETE FROM AD_TreeNodeBP WHERE AD_Client_ID = :old.AD_Client_ID AND Node_ID = :old.C_BPartner_ID;
  END IF;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR (-20004, 'C_BPartner InsertTrigger Error: No ClientInfo or parent TreeNode');

END C_BPartner_Trg 
</body>
    </trigger>
  </database>
