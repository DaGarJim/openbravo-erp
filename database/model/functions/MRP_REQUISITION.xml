<?xml version="1.0"?>
  <database name="FUNCTION MRP_REQUISITION">
    <function name="MRP_REQUISITION" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID NUMBER;
  v_User_ID NUMBER:=0;
  v_Client_ID NUMBER;
  v_Org_ID NUMBER;
  v_Description VARCHAR(255);

  v_MRequisition_ID NUMBER:=NULL;
  v_MRequisitionLine_ID NUMBER;
  v_DocumentNo NVARCHAR2(60);

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_workproposal RECORD;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter

    SELECT Description
      INTO v_Description
     FROM MRP_RUN_PRODUCTION
     WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID;

    FOR Cur_workproposal IN (
      SELECT *
      FROM MRP_RUN_PRODUCTIONLINE
      WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
        AND INOUTTRXTYPE = 'MP'
        AND M_REQUISITIONLINE_ID IS NULL
      ORDER BY PLANNEDDATE
      ) LOOP
      v_ResultStr:='Create Requisition';

      if (v_MRequisition_ID is null) then
        Ad_Sequence_Next('M_Requisition', v_User_ID, v_MRequisition_ID);
        Ad_Sequence_Doc('DocumentNo_M_Requisition', v_Client_ID, 'Y', v_DocumentNo) ;

        INSERT INTO M_Requisition
          (M_REQUISITION_ID, AD_CLIENT_ID, AD_ORG_ID,
          ISACTIVE, CREATED,  CREATEDBY,  UPDATED,  UPDATEDBY,
          DESCRIPTION, DOCUMENTNO, C_BPARTNER_ID,
          M_PRICELIST_ID, C_CURRENCY_ID)
        VALUES
         (v_MRequisition_ID, v_Client_ID, v_Org_ID,
          'Y', now(), v_User_ID, now(), v_User_ID,
          v_Description, v_DocumentNo,  null,
          null, null);
      end if;

      Ad_Sequence_Next('M_RequisitionLine', v_User_ID, v_MRequisitionLine_ID);
      INSERT INTO M_REQUISITIONLINE
        (M_REQUISITIONLINE_ID,  AD_CLIENT_ID, AD_ORG_ID,
        ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        M_REQUISITION_ID,  DATEPLANNED, M_PRODUCT_ID,
        QTY, PRICESTD, PRICELIMIT, PRICELIST,
        C_ORDER_ID, LINENETAMT)
      VALUES
        (v_MRequisitionLine_ID, v_Client_ID, v_Org_ID,
          'Y', now(), v_User_ID, now(), v_User_ID,
          v_MRequisition_ID, Cur_workproposal.PLANNEDDATE, Cur_workproposal.M_PRODUCT_ID,
          Cur_workproposal.QTY, NULL, NULL, NULL,
          NULL,NULL
        );

      UPDATE MRP_RUN_PRODUCTIONLINE
         SET M_REQUISITIONLINE_ID=v_MRequisitionLine_ID
       WHERE MRP_RUN_PRODUCTIONLINE_ID = Cur_workproposal.MRP_RUN_PRODUCTIONLINE_ID;
    END LOOP;
  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END MRP_REQUISITION


]]></body>
    </function>
  </database>
