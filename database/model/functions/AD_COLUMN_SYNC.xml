<?xml version="1.0"?>
  <database name="FUNCTION AD_COLUMN_SYNC">
    <function name="AD_COLUMN_SYNC" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body><![CDATA[                                
  /*************************************************************************
  * The contents of this file are subject to the Compiere License
  * Version 2.5.0 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  * http://www.compiere.org/license.html
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
  Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 1999-2005 Openbravo, S.L
  *************************************************************************
  * $Id: AD_Column_Sync.sql,v 1.7 2002/12/05 05:42:26 jjanke Exp $
  ***
  * Title: Synchronize Column with Database
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    -- Variables
    v_TableName AD_Table.TableName%TYPE;
    v_ColumnName AD_Column.ColumnName%TYPE;
    v_AD_Reference_ID AD_Column.AD_Reference_ID%TYPE;
    v_FieldLength AD_Column.FieldLength%TYPE;
    v_DefaultValue AD_Column.DefaultValue%TYPE;
    v_IsMandatory AD_Column.IsMandatory%TYPE;
    --
    v_DB_DataType USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    v_Cmd VARCHAR2(255):='';
    v_DB_TableName VARCHAR(60):=NULL;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Get Table/Column Info
    v_ResultStr:='ReadingColumnInfo';
    SELECT t.TableName, c.ColumnName, c.AD_Reference_ID, c.FieldLength, c.DefaultValue, c.IsMandatory
    INTO v_TableName, v_ColumnName, v_AD_Reference_ID, v_FieldLength, v_DefaultValue, v_IsMandatory
    FROM AD_Table t, AD_Column c
    WHERE t.AD_Table_ID=c.AD_Table_ID  AND c.AD_Column_ID=v_Record_ID;
    -- Check if Table exists
    v_ResultStr:='ReadingDBTableInfo';
  BEGIN
    SELECT Table_Name
    INTO v_DB_TableName
    FROM USER_TABLES
    WHERE Table_Name=UPPER(v_TableName) ;
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END;
  -- Table does not exists
  IF(v_DB_TableName IS NULL) THEN
    v_ResultStr:='CreateTableCommand';
  BEGIN
    v_CMD:='CREATE TABLE ' || SYS_CONTEXT('USERENV', 'CURRENT_USER') || '.'  || UPPER(v_TableName) || ' (XXXX CHAR(1))';
    EXECUTE IMMEDIATE v_Cmd;
  EXCEPTION
  WHEN OTHERS THEN
    v_Result:=0; -- failure
    v_Message:='Error: ' || SQLERRM || ' - Command: ' || v_Cmd;
    FINISH_PROCESS:=true;
  END;
 END IF;
 IF(NOT FINISH_PROCESS) THEN
   -- Get Data Dictionary Info
   v_ResultStr:='ReadingDBColumnInfo';
 BEGIN
   SELECT DATA_TYPE --, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, DATA_DEFAULT
   INTO v_DB_DataType
   FROM USER_TAB_COLUMNS
   WHERE TABLE_NAME=UPPER(v_TableName) AND COLUMN_NAME=UPPER(v_ColumnName) ;
 EXCEPTION
 WHEN OTHERS THEN
   NULL;
 END;
 /**
 * Create Column in Database
 */
 IF(v_DB_DataType IS NULL) THEN
   v_ResultStr:='CreateALTERCommand';
 BEGIN
   --  Get TableName
   v_Cmd:='ALTER TABLE ' || v_TableName || ' ADD ' || v_ColumnName || ' ';
   -- Map Data Type
   IF(v_AD_Reference_ID IN(10, 14)) THEN
     -- String, Text
     v_Cmd:=v_Cmd || 'VARCHAR2(' || v_FieldLength || ')';
   ELSIF(v_AD_Reference_ID IN(17, 20, 28)) THEN
     -- List,YesNo,Button
     v_Cmd:=v_Cmd || 'CHAR(' || v_FieldLength || ')';
   ELSIF(v_AD_Reference_ID IN(13, 18, 19, 21, 25, 27, 30, 31)) THEN
     -- ID,Table,TableDir,Location,Account,Color,Search,Locator
     v_Cmd:=v_Cmd || 'NUMBER(10)';
   ELSIF(v_AD_Reference_ID IN(11, 12, 22, 29)) THEN
     -- Integer,Amount,Number,Quantity
     v_Cmd:=v_Cmd || 'NUMBER';
   ELSIF(v_AD_Reference_ID IN(15, 16)) THEN
     -- Date,DateTime
     v_Cmd:=v_Cmd || 'DATE';
   ELSE -- 23-Binary, 24-Radio, 26-RowID, 32-Image
     v_Result:=0; -- failure
     v_Message:='DisplayType Not Supported';
   END IF;
   -- Default (literal)
   IF(v_DefaultValue IS NOT NULL AND LENGTH(v_DefaultValue)<>0) THEN
     IF(v_AD_Reference_ID IN(10, 14, 17, 20, 28)) THEN
       v_Cmd:=v_Cmd || ' DEFAULT (''' || v_DefaultValue || ''')';
     ELSE
       v_Cmd:=v_Cmd || ' DEFAULT ' || v_DefaultValue;
     END IF;
   END IF;
   -- Mandatory
   IF(v_IsMandatory='Y') THEN
     IF(v_DefaultValue IS NULL OR LENGTH(v_DefaultValue)=0) THEN
       v_Result:=0; -- failure
       v_Message:='Mandatory requites literal default value';
     ELSE
       v_Cmd:=v_Cmd || ' NOT NULL';
     END IF;
   END IF;
   -- Execute it
   IF(v_Result=1) THEN
     EXECUTE IMMEDIATE v_Cmd;
     v_Message:='@Created@ - ' || v_Cmd;
   END IF;
 EXCEPTION
 WHEN OTHERS THEN
   v_Result:=0; -- failure
   v_Message:='Error: ' || SQLERRM || ' - Command: ' || v_Cmd;
 END;
 /**
 * Change certain Attributes
 */
 ELSE
   v_ResultStr:='CreateALTERCommand';
 BEGIN
   --  Get TableName
   v_Cmd:='ALTER TABLE ' || v_TableName || ' MODIFY ' || v_ColumnName || ' ';
   -- Map Data Type
   IF(v_AD_Reference_ID IN(10, 14)) THEN
     -- String, Text
     v_Cmd:=v_Cmd || 'VARCHAR2(' || v_FieldLength || ')';
   ELSIF(v_AD_Reference_ID IN(17, 20, 28)) THEN
     -- List,YesNo,Button
     v_Cmd:=v_Cmd || 'CHAR(' || v_FieldLength || ')';
   ELSIF(v_AD_Reference_ID IN(13, 18, 19, 21, 25, 27, 30, 31)) THEN
     -- ID,Table,TableDir,Location,Account,Color,Search,Locator
     v_Cmd:=v_Cmd || 'NUMBER(10)';
   ELSIF(v_AD_Reference_ID IN(11, 12, 22, 29)) THEN
     -- Integer,Amount,Number,Quantity
     v_Cmd:=v_Cmd || 'NUMBER';
   ELSIF(v_AD_Reference_ID IN(15, 16)) THEN
     -- Date,DateTime
     v_Cmd:=v_Cmd || 'DATE';
   ELSE -- 23-Binary, 24-Radio, 26-RowID, 32-Image
     v_Result:=0; -- failure
     v_Message:='DisplayType Not Supported';
   END IF;
   -- Default (literal)
   IF(v_DefaultValue IS NOT NULL AND LENGTH(v_DefaultValue)<>0) THEN
     IF(v_AD_Reference_ID IN(10, 14, 17, 20, 28)) THEN
       v_Cmd:=v_Cmd || ' DEFAULT (''' || v_DefaultValue || ''')';
     ELSE
       v_Cmd:=v_Cmd || ' DEFAULT ' || v_DefaultValue;
     END IF;
   END IF;
   -- Mandatory
   IF(v_IsMandatory='Y') THEN
     IF(v_DefaultValue IS NULL OR LENGTH(v_DefaultValue)=0) THEN
       v_Result:=0; -- failure
       v_Message:='Mandatory requites literal default value';
     ELSE
       v_Cmd:=v_Cmd || ' NOT NULL';
     END IF;
   END IF;
   -- Execute it
   IF(v_Result=1) THEN
     EXECUTE IMMEDIATE v_Cmd;
     v_Message:='@Updated@ - ' || v_Cmd;
   END IF;
 EXCEPTION
 WHEN OTHERS THEN
   v_Result:=0; -- failure
   v_Message:='Error: ' || SQLERRM || ' - Command: ' || v_Cmd;
 END;
 END IF;
 /**
 * Delete Column
 */
 /* ELSE
 v_Cmd := 'ALTER TABLE ' || v_TableName
 || ' DROP COLUMN ' || v_ColumnName;
 -- Execute it
 EXECUTE IMMEDIATE v_Cmd;
 END IF;*/
 /**/
 -- Table did not exist - drop initial column
 IF(v_DB_TableName IS NULL) THEN
   v_ResultStr:='CreateDropXXColumnCommand';
 BEGIN
   v_CMD:='ALTER TABLE ' || v_TableName || ' DROP COLUMN XXXX';
   EXECUTE IMMEDIATE v_Cmd;
 EXCEPTION
 WHEN OTHERS THEN
   v_Result:=0; -- failure
   v_Message:='Error: ' || SQLERRM || ' - Command: ' || v_Cmd;
 END;
 END IF;
 END IF; --FINISH_PROCESS
 --<<FINISH_PROCESS>>
 --  Update AD_PInstance
 DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
 AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
 RETURN;
 END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END AD_Column_Sync]]></body>
    </function>
  </database>
