<?xml version="1.0"?>
  <database name="FUNCTION A_AMORTIZATION_PROCESS">
    <function name="A_AMORTIZATION_PROCESS" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body><![CDATA[
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER:=0;
  v_PROCESSED CHAR(1):='N';
  v_POSTED CHAR(1):='Y';
  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    SELECT PROCESSED, POSTED
    INTO v_PROCESSED, v_POSTED
    FROM A_AMORTIZATION
    WHERE A_AMORTIZATION_ID=V_Record_ID;
    IF(v_PROCESSED='Y' AND v_POSTED='N') THEN
      --UnProcess amortization
      v_ResultStr:='ProcessAmortization';
      UPDATE A_Amortization
        SET Processed='N', TotalAmortization=
        (SELECT sum(C_Currency_Convert(AmortizationAmt, C_Currency_ID, A_Amortization.C_Currency_ID, now(), 'S'))
        FROM A_AmortizationLine
        WHERE A_Amortization_ID=A_Amortization.A_Amortization_ID
        )
      WHERE A_Amortization_ID=V_Record_ID;
    ELSIF(v_PROCESSED='N') THEN
      --Process amortization
      v_ResultStr:='ProcessAmortization';
      UPDATE A_Amortization
        SET Processed='Y', TotalAmortization=
        (SELECT sum(C_Currency_Convert(AmortizationAmt, C_Currency_ID, A_Amortization.C_Currency_ID, now(), 'S'))
        FROM A_AmortizationLine
        WHERE A_Amortization_ID=A_Amortization.A_Amortization_ID
        )
      WHERE A_Amortization_ID=V_Record_ID;
    ELSIF(v_Posted='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@AmortizationDocumentPosted@') ;
    END IF;
    IF(FINISH_PROCESS=false) THEN
      --Calculating Depreciated value
      v_ResultStr:='CalculatingDepreciatedValue';
      UPDATE a_asset
        SET DepreciatedValue=
        (SELECT sum(AMORTIZATIONAMT)
        FROM a_amortizationline al, a_amortization am
        WHERE a_asset.a_asset_id=al.a_asset_id
          AND al.A_Amortization_ID=am.A_Amortization_ID
          AND coalesce(am.processed, 'N')='Y'
        )
      WHERE exists
        (SELECT 1
        FROM a_amortizationline al, a_amortization am
        WHERE a_asset.a_asset_id=al.a_asset_id
          AND al.A_Amortization_ID=am.A_Amortization_ID
          AND am.A_Amortization_ID=V_Record_ID);
      UPDATE a_asset
        SET IsFullyDepreciated='Y'
      WHERE COALESCE(AmortizationValueAmt, -1)=COALESCE(DepreciatedValue, -2) ;
    END IF;
    --<<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    -- Commented by cromero 19102006 COMMIT;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RAISE_APPLICATION_ERROR(-20100, v_ResultStr) ;
--  RETURN;
END a_Amortization_Process
]]></body>
    </function>
  </database>
