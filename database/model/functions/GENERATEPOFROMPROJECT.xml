<?xml version="1.0"?>
  <database name="FUNCTION GENERATEPOFROMPROJECT">
    <function name="GENERATEPOFROMPROJECT" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body>
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER;
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    v_C_Order_ID NUMBER;
    v_C_DOCTYPE_ID NUMBER;
    v_DocumentNo NVARCHAR2(30) ;
    v_BPartner_Location_ID NUMBER;
    v_BillTo_ID NUMBER;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get PARAMETERS
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        i.AD_Org_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        p.P_Date_To
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    DECLARE
    TYPE RECORD IS REF CURSOR;
      Cur_SO RECORD;
    BEGIN
      v_ResultStr:='StartLoop';
      FOR Cur_SO IN
        (SELECT P.C_PROJECT_ID,
          P.PROJECTSTATUS,
          V.AD_CLIENT_ID,
          V.AD_ORG_ID,
          V.C_BPARTNER_ID,
          V.C_INCOTERMS_ID,
          V.C_PROJECT_VENDOR_ID,
          V.INCOTERMS_DESCRIPTION,
          V.M_PRICELIST_VERSION_ID,
          V.M_PRICELIST_ID,
          P.C_CAMPAIGN_ID,
          PL.C_CURRENCY_ID,
          BP.PAYMENTRULEPO AS PAYMENTRULE,
          BP.PO_PAYMENTTERM_ID AS C_PAYMENTTERM_ID,
          P.M_WAREHOUSE_ID,
          P.POREFERENCE,
          P.SALESREP_ID
        FROM C_PROJECT P,
          C_PROJECT_VENDOR V,
          C_BPARTNER BP,
          M_PRICELIST PL
        WHERE P.C_PROJECT_ID=V.C_PROJECT_ID
          AND V.C_BPARTNER_ID=BP.C_BPARTNER_ID
          AND V.M_PRICELIST_ID=PL.M_PRICELIST_ID
          AND V.ISACTIVE='Y'
          AND V.C_PROJECT_VENDOR_ID=v_Record_ID
        )
      LOOP
        -- Check that we have some restrictions
        v_ResultStr:='CheckRestriction';
        IF(Cur_SO.PROJECTSTATUS IS NULL OR Cur_SO.PROJECTSTATUS&lt;&gt;'OR') THEN
         RAISE_APPLICATION_ERROR(-20000, '@Invalidprojectstatus@');
        END IF;
        v_C_Order_ID:=Ad_Sequence_Nextno('C_Order') ;
        v_C_DOCTYPE_ID:=Ad_Get_DocType(Cur_SO.AD_Client_ID, Cur_SO.AD_Org_ID, 'POO') ;
        AD_Sequence_DocType(v_C_DOCTYPE_ID, Cur_SO.AD_Client_ID, 'Y', v_DocumentNo) ;
        IF(v_DocumentNo IS NULL) THEN
          AD_Sequence_Doc('DocumentNo_C_Order', Cur_SO.AD_Client_ID, 'Y', v_DocumentNo) ;
        END IF;
        SELECT MIN(C_BPARTNER_LOCATION_ID)
        INTO v_BPartner_Location_ID
        FROM C_BPARTNER_LOCATION
        WHERE ISACTIVE='Y'
          AND ISSHIPTO='Y'
          AND C_BPARTNER_ID=Cur_SO.C_BPARTNER_ID;
        SELECT MIN(C_BPARTNER_LOCATION_ID)
        INTO v_BillTo_ID
        FROM C_BPARTNER_LOCATION
        WHERE ISACTIVE='Y'
          AND ISBILLTO='Y'
          AND C_BPARTNER_ID=Cur_SO.C_BPARTNER_ID;
        INSERT
        INTO C_ORDER
          (
            C_ORDER_ID, AD_CLIENT_ID, AD_ORG_ID, CREATEDBY,
            UPDATEDBY, ISSOTRX, DOCUMENTNO, DOCSTATUS,
            DOCACTION, C_DOCTYPE_ID, C_DOCTYPETARGET_ID, DATEORDERED,
            DATEACCT, C_BPARTNER_ID, C_BPARTNER_LOCATION_ID, ISDISCOUNTPRINTED,
            C_CURRENCY_ID, PAYMENTRULE, C_PAYMENTTERM_ID, INVOICERULE,
            DELIVERYRULE, FREIGHTCOSTRULE, DELIVERYVIARULE, PRIORITYRULE,
            TOTALLINES, GRANDTOTAL, M_WAREHOUSE_ID, M_PRICELIST_ID,
            ISTAXINCLUDED, POSTED, PROCESSING, SALESREP_ID,
            BILLTO_ID, POREFERENCE, C_CAMPAIGN_ID, C_PROJECT_ID,
            AD_USER_ID, COPYFROM, C_INCOTERMS_ID, INCOTERMSDESCRIPTION,
            DATEPROMISED
          )
          VALUES
          (
            v_C_Order_ID, Cur_SO.AD_CLIENT_ID, Cur_SO.AD_ORG_ID, v_AD_User_ID,
            v_AD_User_ID, 'N', v_DocumentNo, 'DR',
             'CO', 0, v_C_DOCTYPE_ID, TRUNC(now(), 'DD'),
            TRUNC(now(), 'DD'), Cur_SO.C_BPARTNER_ID, v_BPartner_Location_ID, 'N',
            Cur_SO.C_CURRENCY_ID, COALESCE(Cur_SO.PAYMENTRULE, 'P'), Cur_SO.C_PAYMENTTERM_ID, 'D',
             'A', 'I', 'D', '5',
            0, 0, Cur_SO.M_WAREHOUSE_ID, Cur_SO.M_PRICELIST_ID,
             'N', 'N', 'N', Cur_SO.SALESREP_ID,
            v_BillTo_ID, Cur_SO.POREFERENCE, Cur_SO.C_CAMPAIGN_ID, Cur_SO.C_PROJECT_ID,
            NULL, 'N', Cur_SO.C_INCOTERMS_ID, Cur_SO.INCOTERMS_DESCRIPTION,
            TRUNC(now(), 'DD')
          )
          ;
        IF v_Message IS NOT NULL THEN
          v_Message:=v_Message || ', ';
        END IF;
        v_Message:=v_Message || v_DocumentNo;
      END LOOP;
      v_Message:='@DocumentNo@: ' || v_Message;
    END;
    --&lt;&lt;FINISH_PROCESS&gt;&gt;
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END GeneratePOFromProject
</body>
    </function>
  </database>
