<?xml version="1.0"?>
  <database name="FUNCTION FACT_ACCT_RESET">
    <function name="FACT_ACCT_RESET" type="NULL">
      <parameter name="p_PInstance_ID" type="NUMERIC" mode="in"/>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere License
  * Version 2.5.0 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  * http://www.compiere.org/license.html
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
  Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright Â¿ 1999-2005 Openbravo, S.L
  *************************************************************************
  * $Id: Fact_Acct_Reset.sql,v 1.4 2003/01/27 06:22:11 jjanke Exp $
  ***
  * Title: Reset Posting Records
  * Description:
  *   Delete Records in Fact_Acct or
  *   Reset Posted
  *   for AD_Client_ID and AD_Table_ID
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID NUMBER;
  v_AD_User_ID NUMBER;
  v_DateColumn VARCHAR2(2000):='';
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AD_Client_ID NUMBER(10) ;
    v_AD_Table_ID NUMBER(10) ;
    v_DeletePosting VARCHAR(1):='N';
    --
    v_Updated NUMBER(10):=0;
    v_Deleted NUMBER(10):=0;
    v_Cmd VARCHAR2(2000):='';
    v_rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    Ad_Update_Pinstance(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='AD_Client_ID') THEN
        v_AD_Client_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  AD_Client_ID=' || v_AD_Client_ID) ;
      ELSIF(Cur_Parameter.ParameterName='AD_Table_ID') THEN
        v_AD_Table_ID:=Cur_Parameter.P_Number;
        DBMS_OUTPUT.PUT_LINE('  AD_Table_ID=' || v_AD_Table_ID) ;
      ELSIF(Cur_Parameter.ParameterName='DeletePosting') THEN
        v_DeletePosting:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  DeletePosting=' || v_DeletePosting) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    DECLARE
    TYPE RECORD IS REF CURSOR;
      Cur_Clients RECORD;
      Cur_Tables RECORD;
      Cur_Fact_Acct RECORD;
    BEGIN
      FOR Cur_Clients IN
        (SELECT AD_Client_ID
        FROM AD_CLIENT
        WHERE(v_AD_Client_ID IS NULL
          OR AD_Client_ID=v_AD_Client_ID)
          AND AD_Client_ID<>0
        )
      LOOP
        FOR Cur_Tables IN
          (SELECT DISTINCT t.AD_Table_ID,
            t.TableName,
            C_DOCTYPE.DOCBASETYPE
          FROM AD_TABLE t,
            C_DOCTYPE
          WHERE t.AD_TABLE_ID=C_DOCTYPE.AD_TABLE_ID
            AND(v_AD_Table_ID IS NULL
            OR t.AD_Table_ID=v_AD_Table_ID)
            AND EXISTS
            (SELECT *
            FROM AD_COLUMN c
            WHERE t.AD_Table_ID=c.AD_Table_ID
              AND c.ColumnName='Posted'
            )
            AND EXISTS
            (SELECT *
            FROM AD_COLUMN c
            WHERE t.AD_Table_ID=c.AD_Table_ID
              AND c.ColumnName='Processing'
            )
            AND t.IsView='N'
          )
        LOOP
          DBMS_OUTPUT.PUT_LINE('AD_Client_ID=' || Cur_Clients.AD_Client_ID || ', AD_Table_ID=' || Cur_Tables.AD_Table_ID || ' ' || Cur_Tables.TableName) ;
          -- Update Table
          v_ResultStr:='ResetTable:' || Cur_Tables.TableName;
          IF(v_DeletePosting='Y') THEN
            FOR Cur_Fact_Acct IN (
              SELECT Record_ID
              FROM FACT_ACCT
              WHERE AD_TABLE_ID=Cur_Tables.AD_Table_ID
                AND NOT EXISTS
                    (SELECT 1
                    FROM C_YEAR, C_PERIOD, C_PERIODCONTROL, AD_CLIENTINFO, FACT_ACCT fa_aux
                    WHERE C_YEAR.c_year_id=C_PERIOD.c_year_id
                      AND C_PERIOD.c_period_id=C_PERIODCONTROL.c_period_id
                      AND C_YEAR.c_calendar_id=AD_CLIENTINFO.c_calendar_id
                      AND AD_CLIENTINFO.ad_client_id=fa_aux.AD_CLIENT_ID
                      AND C_PERIODCONTROL.docbasetype=fa_aux.DOCBASETYPE
                      AND C_PERIODCONTROL.periodstatus<>'O'
                      AND fa_aux.DATEACCT>=C_PERIOD.StartDate
                      AND fa_aux.DATEACCT<C_PERIOD.EndDate + 1
                      AND fa_aux.AD_TABLE_ID = FACT_ACCT.AD_TABLE_ID
                      AND fa_aux.RECORD_ID = FACT_ACCT.RECORD_ID
                    )
                AND Record_ID=(
                      CASE COALESCE(v_Record_ID, 0) WHEN 0 THEN Record_ID ELSE v_Record_ID
                      END)
                AND AD_Client_ID = Cur_Clients.AD_Client_ID
              ) LOOP
              IF(Cur_Tables.AD_Table_ID IN(472, 473)) THEN
                v_DateColumn:='DATETRX';
              ELSIF(Cur_Tables.AD_Table_ID IN(392)) THEN
                v_DateColumn:='STATEMENTDATE';
              ELSIF(Cur_Tables.AD_Table_ID IN(321, 323, 325)) THEN
                v_DateColumn:='MOVEMENTDATE';
              ELSE
                v_DateColumn:='DATEACCT';
              END IF;
              v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'', Processing=''N'' WHERE AD_Client_ID='  || Cur_Clients.AD_Client_ID  
        || ' AND (Posted<>''N'' OR Posted IS NULL OR Processing<>''N'' OR Processing IS NULL) AND '   ||
        Cur_Tables.TableName||'_ID = '||Cur_Fact_Acct.Record_ID;
              -- DBMS_OUTPUT.PUT_LINE('  executing: ' || v_Cmd);
              EXECUTE IMMEDIATE v_Cmd;
              v_rowcount:=SQL%ROWCOUNT;
              v_Updated:=v_Updated + v_rowcount;
              DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
              -- Delete Fact
              v_ResultStr:='DeleteFact';
        DELETE --Deleting complete entries related to the document
           FROM FACT_ACCT_CFS
           WHERE FACT_ACCT_CFS_ID IN (
		        SELECT FACT_ACCT_CFS_ID
		        FROM FACT_ACCT_CFS CFS1
		        INNER JOIN FACT_ACCT ON
			             FACT_ACCT.FACT_ACCT_ID = CFS1.FACT_ACCT_REF_ID
			             AND AD_TABLE_ID=Cur_Tables.AD_Table_ID
                         AND Record_ID=Cur_Fact_Acct.Record_ID
                         AND FACT_ACCT.AD_Client_ID = Cur_Clients.AD_Client_ID
	        );
        DELETE
              FROM FACT_ACCT
              WHERE AD_TABLE_ID=Cur_Tables.AD_Table_ID
                AND Record_ID=Cur_Fact_Acct.Record_ID
                AND AD_Client_ID = Cur_Clients.AD_Client_ID;

              v_rowcount:=SQL%ROWCOUNT;
              v_Deleted:=v_Deleted + v_rowcount;
              DBMS_OUTPUT.PUT_LINE('  deleted=' || v_rowcount) ;
            END LOOP;
        v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'', Processing=''N'' WHERE AD_Client_ID='  || Cur_Clients.AD_Client_ID  
        || ' AND (Posted=''Y'' OR Processing<>''N'' OR Processing IS NULL) AND NOT EXISTS (SELECT 1 FROM FACT_ACCT WHERE AD_TABLE_ID =' || Cur_Tables.AD_Table_ID ||
        ' AND RECORD_ID = ' || Cur_Tables.TableName || '_ID AND AD_CLIENT_ID =' || Cur_Clients.AD_Client_ID || ' )';
            -- DBMS_OUTPUT.PUT_LINE('  executing: ' || v_Cmd);
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
          ELSE
            v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Processing=''N'' WHERE AD_Client_ID='  || Cur_Clients.AD_Client_ID  || ' AND Processing<>''N'' OR Processing IS NULL';
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  unlocked=' || v_rowcount) ;
            v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'' WHERE AD_Client_ID='  || Cur_Clients.AD_Client_ID  || ' AND Posted NOT IN (''Y'',''N'') AND Processed=''Y''';
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
          END IF;
        END LOOP;
      END LOOP;
    END;
    -- Summary info
    v_Message:='@Updated@ = ' || v_Updated || ', @Deleted@ = ' || v_Deleted;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    Ad_Update_Pinstance(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  Ad_Update_Pinstance(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END Fact_Acct_Reset


]]></body>
    </function>
  </database>
