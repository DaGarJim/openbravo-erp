# *************************************************************************
# * The contents of this file are subject to the Openbravo  Public  License
# * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
# * Version 1.1  with a permitted attribution clause; you may not  use this
# * file except in compliance with the License. You  may  obtain  a copy of
# * the License at http://www.openbravo.com/legal/license.html
# * Software distributed under the License  is  distributed  on  an "AS IS"
# * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# * License for the specific  language  governing  rights  and  limitations
# * under the License.
# * The Original Code is Openbravo ERP.
# * The Initial Developer of the Original Code is Openbravo SLU
# * All portions are Copyright (C) 2016-2019 Openbravo SLU
# * All Rights Reserved.
# * Contributor(s):  ______________________________________.
# ************************************************************************
#!/bin/bash

#
# Find all *.js files that should be processed
# Each module can define a .jsexclude in their module's root folder that updates the EXCLUDED array
# Files matching the pattern defined in .jsexclude will not be listed in this script.
#
# Note that there are two types of exclude files:
# * .jsexclude defined in org.openbravo.client.kernel: These patterns will be applied to all modules in the project
# * .jsexclude defined in any other module. Its patterns will only be applied to files contained in this module.
#

# Scan .js files starting from the location defined as argument. If none, $(pwd) will be used
INPUTDIR=$1
DIR=${INPUTDIR:-$(pwd)}

# If file passed as first argument exists, read each line
# and optionally appends the prefix defined as second argument
function readPatternsFromFile {
    excludedPatterns=()
    if [[ -f $1 ]]; then
        while read pattern; do
            if [[ ! -z ${pattern} ]]; then
                excludedPatterns+=("'"${2}${pattern}"'")
            fi
        done < "$1"
    fi

    echo ${excludedPatterns[*]}
}

#Return the module name except for client.kernel module as its rules should be global
function getPrefixFromModulePath {
    if [[ $(basename $1) != "org.openbravo.client.kernel" ]]; then
        echo "*$(basename $1)/"
    else
        echo ""
    fi
}

EXCLUDED=()
if [[ -d "$DIR/../../modules" ]]; then
    # Modules will use the exclusion list defined in core (org.openbravo.client.kernel) and their own
    EXCLUDED+=($(readPatternsFromFile "../org.openbravo.client.kernel/.jsexclude"))
    EXCLUDED+=($(readPatternsFromFile "./.jsexclude"))
elif [[ -d "$DIR/../modules" ]]; then
    # Calling from project root should scan all .jsexclude files from modules/*
    for module in ${DIR}/*; do
        prefix=$(getPrefixFromModulePath ${module})
        excludeFile="$module/.jsexclude"
        EXCLUDED+=($(readPatternsFromFile ${excludeFile} ${prefix}))
    done
else
    echo -e "\n\033[0;33mWARNING:\033[0m Could not scan for .jsexclude files from $(pwd)"
fi

FIND_CMD="find $1 -name '*.js'"
for expr in "${EXCLUDED[@]}"; do
    FIND_CMD+=" -and ! -path $expr"
done

eval ${FIND_CMD}
