#!/bin/bash
# *************************************************************************
# * The contents of this file are subject to the Openbravo  Public  License
# * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
# * Version 1.1  with a permitted attribution clause; you may not  use this
# * file except in compliance with the License. You  may  obtain  a copy of
# * the License at http://www.openbravo.com/legal/license.html
# * Software distributed under the License  is  distributed  on  an "AS IS"
# * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# * License for the specific  language  governing  rights  and  limitations
# * under the License.
# * The Original Code is Openbravo ERP.
# * The Initial Developer of the Original Code is Openbravo SLU
# * All portions are Copyright (C) 2019 Openbravo SLU
# * All Rights Reserved.
# * Contributor(s):  ______________________________________.
# ************************************************************************
set -e

SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
VERBOSE=false
FIX=false

source ${SCRIPT_DIR}/../jsutils/dir-functions

function usage() {
  echo -n "Usage: ${SCRIPT_NAME} [-f][-h][-v] [FILE ...]

Utility to pass the Javascript Linter to the given files, or all files from the current directory if none given.
With no arguments, scan all files starting from the current directory taking into account .jsexclude files.
(see jsfiles for further explanation)

 Options:
  -f                Fixes errors/warnings that can automatically be fixed (Adds --fix argument to ESLint)
  -h                Display this help and exit
  -v                Verbose mode. Shows additional output

"
}

#
# Execute the Linter splitting the list of files in chunks of max 250 arguments. This is done because "npm run" argument
# size limit is much lower than the one in bash commands.
#
function lintFiles {
    if [[ ${VERBOSE} == true ]]; then
        echo "Checking the following files: $@"
    else
        echo "Checking $# files"
    fi

    FLAGS=""
    if [[ ${FIX} == true ]]; then
        FLAGS="--fix"
    fi

    echo "$@" | xargs --max-args 250 npm run jslint --prefix ${KERNEL_MODULE_PATH} -s -- ${FLAGS} || exit 1
}

#Parse input arguments
while getopts ":fhv" arg; do
    case ${arg} in
        f )
            FIX=true
        ;;
        h )
            usage
            exit 0
        ;;
        v )
            VERBOSE=true
        ;;
        \? )
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
        ;;
    esac
done
shift $((OPTIND-1))

KERNEL_MODULE_PATH=$(getKernelModulePath)
SCAN_BASE_PATH=$(getJsFilesScanPath)

source ${SCRIPT_DIR}/../jsutils/check-npm-deps

if [[ $# > 0 ]]; then
    files=$(convertPathsToAbsolute $@)
    lintFiles ${files}
else
    files=$(${KERNEL_MODULE_PATH}/jsutils/jsfiles ${SCAN_BASE_PATH})
    lintFiles ${files}
fi
