<?xml version="1.0"?>
  <database name="TRIGGER APRM_FIN_RECON_CHECK_TRG">
    <trigger name="APRM_FIN_RECON_CHECK_TRG" table="FIN_RECONCILIATION" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[

/************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2010-2016 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
*************************************************************************/

v_DateNull DATE := TO_DATE('01-01-1900','DD-MM-YYYY');
TYPE RECORD IS REF CURSOR;
Cur_Recon RECORD;

v_startingbalance NUMBER;
v_endingbalance NUMBER;
v_curdiffbalance NUMBER;
  
BEGIN
   
  IF AD_isTriggerEnabled()='N' THEN RETURN;
  END IF;

  IF (UPDATING) THEN
    IF(:OLD.PROCESSED='Y' AND ((COALESCE(:OLD.AD_ORG_ID, '0') <> COALESCE(:NEW.AD_ORG_ID, '0'))
      OR(COALESCE(:OLD.FIN_FINANCIAL_ACCOUNT_ID, '0') <> COALESCE(:NEW.FIN_FINANCIAL_ACCOUNT_ID, '0'))    
      OR(COALESCE(:OLD.DOCUMENTNO, '0') <> COALESCE(:NEW.DOCUMENTNO, '0'))
      OR(COALESCE(:OLD.C_DOCTYPE_ID, '0') <> COALESCE(:NEW.C_DOCTYPE_ID, '0'))
      OR(COALESCE(:OLD.DATETO, v_DateNull) <> COALESCE(:NEW.DATETO, v_DateNull))
      OR(COALESCE(:OLD.STATEMENTDATE, v_DateNull) <> COALESCE(:NEW.STATEMENTDATE, v_DateNull))
      OR(COALESCE(:OLD.DOCSTATUS, '0') <> COALESCE(:NEW.DOCSTATUS, '0')))) THEN
      RAISE_APPLICATION_ERROR(-20000, '@20501@');
    END IF;
  END IF;
  IF(INSERTING) THEN
   IF(:NEW.PROCESSED='Y') THEN
     RAISE_APPLICATION_ERROR(-20000, '@20501@');
   END IF;
  END IF;
  IF(DELETING) THEN
   IF(:OLD.PROCESSED='Y') THEN
     RAISE_APPLICATION_ERROR(-20000, '@20501@');
   END IF;

   --Is necessary update starting and ending balances of subsequents reconciliations
   v_startingbalance := :OLD.startingbalance;
   FOR Cur_Recon IN (
     SELECT documentno, startingbalance, endingbalance, statementdate, fin_reconciliation_id
       FROM fin_reconciliation
       WHERE fin_financial_account_id = :OLD.fin_financial_account_id
         AND trunc(statementdate) >= trunc(:OLD.statementdate)
       ORDER by statementdate, documentno
   )
   LOOP
      --Do not process record that will be deleted
     IF (Cur_Recon.fin_reconciliation_id <> :OLD.fin_reconciliation_id) THEN
       --Recalculate ending balance using new starting balance and actual
       --difference between starting and ending balances
       v_curdiffbalance := Cur_Recon.endingbalance - Cur_Recon.startingbalance;
       v_endingbalance := v_startingbalance + v_curdiffbalance;

       --Update the current balance
       UPDATE fin_reconciliation
       SET startingbalance = v_startingbalance,
           endingbalance = v_endingbalance
       WHERE fin_reconciliation_id = Cur_Recon.fin_reconciliation_id;

       --The ending balance will be the starting balance of the next reconciliation
       v_startingbalance := v_endingbalance;
     END IF;
   END LOOP;
 END IF;
END APRM_FIN_RECON_CHECK_TRG
]]></body>
    </trigger>
  </database>
