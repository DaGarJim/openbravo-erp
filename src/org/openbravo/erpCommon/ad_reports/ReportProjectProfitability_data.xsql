<?xml version="1.0" encoding="UTF-8" ?>
<!--
    *************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html 
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License. 
    * The Original Code is Openbravo ERP. 
    * The Initial Developer of the Original Code is Openbravo SL 
    * All portions are Copyright (C) 2001-2008 Openbravo SL 
    * All Rights Reserved. 
    * Contributor(s):  ______________________________________.
    ************************************************************************
    -->



<SqlClass name="ReportProjectProfitabilityData" package="org.openbravo.erpCommon.ad_reports">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT P.NAME AS PROJECTNAME, P.DATECONTRACT AS INITDATE, BPRESP.NAME AS RESPONSIBLE,
          P.AD_ORG_ID AS ORG, BPCLIENT.NAME AS PARTNER, ORG.NAME AS ORGNAME,PT.NAME AS PROJECTTYPE,
          C_CURRENCY_ISOSYM(?) AS CONVISOSYM, 
          C_CURRENCY_CONVERT(COALESCE(P.SERVREVENUE,0), P.C_CURRENCY_ID, ?, TO_DATE(COALESCE(P.DATECONTRACT, P.DATEFINISH, NOW())), NULL, P.AD_CLIENT_ID, P.AD_ORG_ID) AS PLANREVENUE, 
          C_CURRENCY_CONVERT(COALESCE(P.SERVCOST,0), P.C_CURRENCY_ID, ?, TO_DATE(COALESCE(P.DATECONTRACT, P.DATEFINISH, NOW())), NULL, P.AD_CLIENT_ID, P.AD_ORG_ID) AS PLANCOST, 
          C_CURRENCY_CONVERT(COALESCE(P.EXPREINVOICING,0), P.C_CURRENCY_ID, ?, TO_DATE(COALESCE(P.DATECONTRACT, P.DATEFINISH, NOW())), NULL, P.AD_CLIENT_ID, P.AD_ORG_ID) AS PLANREINVOICING, 
          C_CURRENCY_CONVERT(COALESCE(P.EXPEXPENSES,0), P.C_CURRENCY_ID, ?, TO_DATE(COALESCE(P.DATECONTRACT, P.DATEFINISH, NOW())), NULL, P.AD_CLIENT_ID, P.AD_ORG_ID) AS PLANEXPENSES,
          COALESCE(SERREV.AMOUNT,0) AS REALREVENUE, 
          COALESCE(COST.COST,0) AS REALCOST, 
          COALESCE(EXPREI.AMOUNT,0) AS REALREINVOICED, 
          COALESCE(EXPEXP.AMOUNT,0) AS REALEXPENSES,
          COALESCE(COLLECTED.AMOUNT,0) AS COLLECTED, 
          '' AS NODE_ID, '' AS ISSUMMARY
        FROM C_BPartner bpclient, AD_Org org, 
          C_Project p LEFT JOIN C_BPartner bpresp ON  p.Responsible_ID = bpresp.C_BPartner_ID
                      LEFT JOIN C_Projecttype pt ON pt.C_Projecttype_ID = p.C_Projecttype_ID 
                      LEFT JOIN (SELECT S_TimeExpenseLine.C_Project_ID, 
	   	   SUM((CASE S_TimeExpenseLine.IsTimereport WHEN 'Y' THEN S_TimeExpenseLine.qty ELSE 0 END)*
	   	   C_CURRENCY_CONVERT(C_CALCULATECOST_CATSALARY(C_CALCULATE_CATSALARY(C_BPartner.c_bpartner_id, TO_DATE(COALESCE(S_TimeExpenseLine.DATEEXPENSE, s_timeexpense.DATEREPORT))), TO_DATE(COALESCE(S_TimeExpenseLine.DATEEXPENSE, s_timeexpense.DATEREPORT))),
	   	   ?, ?, TO_DATE(COALESCE(S_TimeExpenseLine.DATEEXPENSE, s_timeexpense.DATEREPORT)), NULL, S_TimeExpenseLine.AD_CLIENT_ID, S_TimeExpenseLine.AD_ORG_ID)) AS cost
           FROM S_TimeExpenseLine , S_TimeExpense, C_BPartner
           WHERE S_TimeExpense.S_TimeExpense_ID = S_TimeExpenseLine.S_TimeExpense_ID
           AND S_TimeExpense.C_BPartner_ID = C_BPartner.C_BPartner_ID
           AND S_TimeExpense.Processed = 'Y'
           AND 1=1            
           GROUP BY S_TimeExpenseLine.C_Project_ID) cost ON p.C_Project_ID = cost.C_Project_ID
                      LEFT JOIN (SELECT c_Project, sum(amount) as amount
           FROM (
           SELECT CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL THEN i.c_project_id ELSE ila.c_project_id END AS C_Project,
                  CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL 
                  THEN COALESCE(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) 
                  ELSE COALESCE(C_CURRENCY_CONVERT(ila.amt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, ila.AD_CLIENT_ID, ila.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) END AS amount
           FROM M_Product p, C_InvoiceLine il LEFT JOIN C_InvoiceLine_AcctDimension ila on il.C_InvoiceLine_ID = ila.C_InvoiceLine_ID,
             C_Invoice i left join (SELECT il.c_invoice_id, sum(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID)) as dis_amt
                                         FROM c_invoiceline il, c_invoice i 
                                        WHERE il.c_invoice_discount_id IS NOT NULL
                                        AND il.c_invoice_id= i.c_invoice_id
                                        GROUP BY il.c_invoice_id) disc ON i.C_Invoice_ID = disc.C_Invoice_ID
           WHERE i.C_Invoice_ID = il.C_Invoice_ID
             AND il.M_Product_ID = p.M_Product_ID
             AND i.issotrx = 'Y'
             AND i.docStatus IN ('CO', 'CL')
	         AND 2=2
	         AND il.c_invoice_discount_id IS NULL
             AND p.producttype = 'S') AAA
           GROUP BY c_Project) serrev ON p.C_Project_ID = serrev.C_Project
                      LEFT JOIN (SELECT c_Project, sum(amount) as amount
           FROM (
           SELECT CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL THEN i.c_project_id ELSE ila.c_project_id END AS C_Project,
                  CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL 
                  THEN COALESCE(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) 
                  ELSE COALESCE(C_CURRENCY_CONVERT(ila.amt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, ila.AD_CLIENT_ID, ila.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) END AS amount
           FROM M_Product p, C_InvoiceLine il LEFT JOIN C_InvoiceLine_AcctDimension ila on il.C_InvoiceLine_ID = ila.C_InvoiceLine_ID,
             C_Invoice i left join (SELECT il.c_invoice_id, sum(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID)) as dis_amt
                                         FROM c_invoiceline il, c_invoice i 
                                        WHERE il.c_invoice_discount_id IS NOT NULL
                                        AND il.c_invoice_id= i.c_invoice_id
                                        GROUP BY il.c_invoice_id) disc ON i.C_Invoice_ID = disc.C_Invoice_ID
           WHERE i.C_Invoice_ID = il.C_Invoice_ID
             AND il.M_Product_ID = p.M_Product_ID
             AND i.issotrx = 'Y'
             AND i.docStatus IN ('CO', 'CL')
	         AND 3=3
	         AND il.c_invoice_discount_id IS NULL
             AND p.producttype <> 'S') BBB
           GROUP BY c_Project) exprei ON p.C_Project_ID = exprei.C_Project
                      LEFT JOIN (SELECT c_Project, sum(amount) as amount
           FROM (
           SELECT CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL THEN i.c_project_id ELSE ila.c_project_id END AS C_Project,
                  CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL 
                  THEN COALESCE(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) 
                  ELSE COALESCE(C_CURRENCY_CONVERT(ila.amt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, ila.AD_CLIENT_ID, ila.AD_ORG_ID),0) * 
                  (1 + (CASE WHEN i.totallines IS NULL OR disc.dis_amt IS NULL THEN 0 ELSE (COALESCE(disc.dis_amt,0)/(ABS(C_CURRENCY_CONVERT(i.totallines, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, i.AD_CLIENT_ID, i.AD_ORG_ID)) + ABS(disc.dis_amt))) END)) END AS amount
           FROM M_Product p, C_InvoiceLine il LEFT JOIN C_InvoiceLine_AcctDimension ila on il.C_InvoiceLine_ID = ila.C_InvoiceLine_ID,
             C_Invoice i left join (SELECT il.c_invoice_id, sum(C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID)) as dis_amt
                                         FROM c_invoiceline il, c_invoice i 
                                        WHERE il.c_invoice_discount_id IS NOT NULL
                                        AND il.c_invoice_id= i.c_invoice_id
                                        GROUP BY il.c_invoice_id) disc ON i.C_Invoice_ID = disc.C_Invoice_ID
           WHERE i.C_Invoice_ID = il.C_Invoice_ID
           AND il.M_Product_ID = p.M_Product_ID
           AND i.docStatus IN ('CO', 'CL')
	   	   AND 4=4
           AND i.issotrx = 'N') CCC
           GROUP BY c_Project) expexp ON p.C_Project_ID = expexp.C_Project
                      LEFT JOIN (SELECT c_Project, sum(amount) as amount
           FROM (
           SELECT CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL THEN i.c_project_id ELSE ila.c_project_id END AS C_Project,
                  CASE WHEN ila.C_InvoiceLine_AcctDimension_ID IS NULL 
                  THEN C_CURRENCY_CONVERT(il.linenetamt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, il.AD_CLIENT_ID, il.AD_ORG_ID)*C_Invoice_Percentage_Paid(i.C_Invoice_ID) 
                  ELSE C_CURRENCY_CONVERT(ila.amt, i.C_CURRENCY_ID, ?, TO_DATE(COALESCE(i.DATEINVOICED, NOW())), NULL, ila.AD_CLIENT_ID, ila.AD_ORG_ID)*C_Invoice_Percentage_Paid(i.C_Invoice_ID) END AS amount
           FROM C_Invoice i, C_InvoiceLine il LEFT JOIN C_InvoiceLine_AcctDimension ila on il.C_InvoiceLine_ID = ila.C_InvoiceLine_ID,
             M_Product p
           WHERE i.C_Invoice_ID = il.C_Invoice_ID
           AND il.M_Product_ID = p.M_Product_ID
           AND i.docStatus IN ('CO', 'CL')
	   	   AND 5=5
             AND i.issotrx = 'Y') DDD
           GROUP BY c_Project) collected ON p.C_Project_ID = collected.C_Project
        WHERE p.C_BPartner_ID = bpclient.C_BPartner_ID
          AND p.AD_Org_ID = org.AD_Org_ID
          AND p.AD_Org_ID IN ('1')
          AND p.AD_Client_ID IN ('1')
          AND 6=6
        ORDER BY orgname, partner, initdate
      ]]>
    </Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyBase"/>
	<Parameter name="cCurrencyConv"/>
    <Parameter name="datefrom2" optional="true" after="AND 1=1"><![CDATA[ AND s_timeexpense.DATEREPORT >= to_date(?) ]]></Parameter>
    <Parameter name="dateto2" optional="true" after="AND 1=1"><![CDATA[ AND s_timeexpense.DATEREPORT  < to_date(?) ]]></Parameter>
    <Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
    <Parameter name="datefrom2" optional="true" after="AND 2=2"><![CDATA[ AND i.dateinvoiced >= to_date(?) ]]></Parameter>
    <Parameter name="dateto2" optional="true" after="AND 2=2"><![CDATA[ AND i.dateinvoiced  < to_date(?) ]]></Parameter>
    <Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
    <Parameter name="datefrom2" optional="true" after="AND 3=3"><![CDATA[ AND i.dateinvoiced >= to_date(?) ]]></Parameter>
    <Parameter name="dateto2" optional="true" after="AND 3=3"><![CDATA[ AND i.dateinvoiced  < to_date(?) ]]></Parameter>
    <Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
    <Parameter name="datefrom2" optional="true" after="AND 4=4"><![CDATA[ AND i.dateinvoiced >= to_date(?) ]]></Parameter>
    <Parameter name="dateto2" optional="true" after="AND 4=4"><![CDATA[ AND i.dateinvoiced  < to_date(?) ]]></Parameter>
    <Parameter name="cCurrencyConv"/>
	<Parameter name="cCurrencyConv"/>
    <Parameter name="datefrom2" optional="true" after="AND 5=5"><![CDATA[ AND i.dateinvoiced >= to_date(?) ]]></Parameter>
    <Parameter name="dateto2" optional="true" after="AND 5=5"><![CDATA[ AND i.dateinvoiced  < to_date(?) ]]></Parameter>
    <Parameter name="org" optional="true" type="replace" after="AND p.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="client" optional="true" type="replace" after="AND p.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="dateFrom" optional="true" after="AND 6=6"><![CDATA[ AND p.Datecontract >= to_date(?) ]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 6=6"><![CDATA[ AND p.Datecontract < to_date(?) ]]></Parameter>
    <Parameter name="dateFrom3" optional="true" after="AND 6=6"><![CDATA[ AND p.Startdate >= to_date(?) ]]></Parameter>
    <Parameter name="dateTo3" optional="true" after="AND 6=6"><![CDATA[ AND p.Startdate < to_date(?) ]]></Parameter>
    <Parameter name="projecttype" optional="true" after="AND 6=6"><![CDATA[ AND p.C_Projecttype_ID = ? ]]></Parameter>
    <Parameter name="project" optional="true" after="AND 6=6"><![CDATA[ AND p.C_Project_ID = ? ]]></Parameter>
    <Parameter name="Responsible" optional="true" after="AND 6=6"><![CDATA[ AND p.Responsible_ID = ? ]]></Parameter>
    <Parameter name="Partner" optional="true" after="AND 6=6"><![CDATA[ AND p.C_BPartner_ID = ? ]]></Parameter>
  </SqlMethod>
  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql></Sql>
  </SqlMethod>
  <SqlMethod name="selectOrg" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT AD_TREENODE.NODE_ID, AD_ORG.ISSUMMARY
      FROM AD_CLIENTINFO, AD_TREENODE, AD_ORG
      WHERE AD_CLIENTINFO.AD_TREE_ORG_ID = AD_TREENODE.AD_TREE_ID
      AND AD_TREENODE.NODE_ID = AD_ORG.AD_ORG_ID
      AND AD_TREENODE.PARENT_ID = ?
      AND AD_CLIENTINFO.AD_CLIENT_ID = ?
      ORDER BY seqno
      ]]>
    </Sql>
    <Parameter name="adOrgId"/>
    <Parameter name="adClientId"/>
  </SqlMethod>
</SqlClass>
